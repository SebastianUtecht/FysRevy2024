;; Requeres web-mode (web-mode.org)

;; 2018 - Kristoffer Levin Hansen <kristoffer@levinhansen.dk>

;; It's (switch-to-buffer (url-retrieve "http://localhost/stream" 'identity))


(defun monitor-sse (hb)
    "hb = http buffer"
  (with-current-buffer hb
    (goto-char (point-min))
    (setq cnt 0)
    (while (search-forward "\n\n" nil 'toend)
      (setq cnt (1+ cnt)) )
    ;; (prin1 cnt)
    (goto-char (point-min))
    (unless (boundp 'known) (setq-local known 0))
    (search-forward "\n\n" nil 'toend (- known 1))
    (let ((out (list (get-buffer-process (current-buffer)))))
      (while (search-forward "\n\n" nil 'toend)
        (let ((start-point (point))
              (next-start (search-forward "\n\n" nil 'toend))
              found thing)
          (goto-char start-point)
          (setq found (re-search-forward "event:[[:space:]]*\\([[:alnum:]]+\\)" nil 'toend))
          (unless (and found (> found next-start))
            (setq thing (list (match-string-no-properties 1)))
            (cond
             ((string= (car thing) "next") )
             ((string= (car thing) "prev") )
             ((or (string= (car thing) "goto")
                  (string= (car thing) "d") )
              (let ((place (re-search-forward "data:[[:space:]]*\\([[:alnum:]]+\\)" nil 'toend)))
                (while (and place (< place next-start))
                  (setq thing (append thing (list (match-string-no-properties 1))))
                  (setq place (re-search-forward "data:[[:space:]]*\\([[:alnum:]]+\\)" nil 'toend)) ) ) )
             ) )
          (if next-start (goto-char start-point))
          (setq out (append out (list thing))) ) )
      (setq known cnt)
      out ) ) )

(defun figure-out-builds ()
  (let (out slides-end)
    (when (eq major-mode 'web-mode)
      (goto-char (point-min))
      (when (re-search-forward "class=.*slides" nil 'toend)
        (save-excursion
          (web-mode-element-end)
          (setq slides-end (point)) )
        (web-mode-element-child)
        (while (< (point) slides-end) 
          (let ((slide (list (point)))
                slide-end )
            (when (looking-at "<article")
                ;; (not (equal (char-after (1+ (point))) ?!))
              (save-excursion
                (web-mode-element-end)
                (setq slide-end (point)) )
              (re-search-forward "class=\"[^\"]*build" nil 'toend)
              (while (< (point) slide-end)
                (let ((build-start (point))
                      build-end)
                  (save-excursion
                    (web-mode-element-end)
                    (setq build-end (point)) )
                  (web-mode-element-child)
                  (while (< (point) build-end)
                    (unless (looking-at "< *br")
                      (setq slide (append slide (list (point)))) )
                    (web-mode-element-end)
                    (web-mode-element-next) )
                  (goto-char build-start)
                  (web-mode-element-next) )
                (re-search-forward "class=\"[^\"]*build" nil 'toend) )
              (goto-char (nth 0 slide))
              (setq slide (sort slide '<))
              (setq out (append out (list slide))) )
            (web-mode-element-end)
            (let ((pre-point (point)))
              (web-mode-element-next)
              (if (equal pre-point (point))
                  (goto-char (point-max)) ) )
            
             ) ) ) ) 
    out ) )
              

(defun schedule-monitor-sse (hb)
  (when sse-listen-mode
    (let* ((sse-out (monitor-sse hb))
           (process (pop sse-out)) )
      (cl-flet ((place () (goto-char (nth (nth 1 build-indices)
                                          (nth (nth 0 build-indices)
                                               builds-points-list) ))
                       (unless (boundp 'sse-max-list)
                         (setq sse-max-list nil)
                         (make-variable-buffer-local 'sse-max-list) )
                       (if (assoc (nth 0 build-indices) sse-max-list)
                           (setcdr (assoc (nth 0 build-indices) sse-max-list)
                                   (nth 1 build-indices) )
                         (setq sse-max-list (append sse-max-list (list
                                                          (cons (nth 0 build-indices)
                                                                (nth 1 build-indices) ) ))) ) ))
        (cl-flet ((step-forward ()
                                (if (< (nth 1 build-indices)
                                       (1- (safe-length (nth
                                                         (nth 0 build-indices)
                                                         builds-points-list ))))
                                    (setq build-indices (list (nth 0 build-indices)
                                                              (1+ (nth 1 build-indices)) ))
                                  (when (< (nth 0 build-indices)
                                           (1- (safe-length builds-points-list)))
                                    (setq build-indices
                                          (list (1+ (nth 0 build-indices)) 0)) ) )
                                (place) )
                  (step-backward ()
                                 (if (> (nth 1 build-indices) 0)
                                     (setq build-indices (list (nth 0 build-indices)
                                                               (1- (nth 1 build-indices)) ))
                                   (when (> (nth 0 build-indices) 0)
                                     (setq build-indices
                                           (list (1- (nth 0 build-indices))
                                                 (or
                                                  (if (and (boundp 'sse-max-list)
                                                           (assoc (1- (nth 0 build-indices)) sse-max-list) )
                                                      (cdr (assoc (1- (nth 0 build-indices)) sse-max-list))
                                                    nil )
                                                  (1- (safe-length (nth
                                                                    (1- (nth 0 build-indices))
                                                                    builds-points-list ))) ) )) ) )
                                 (place) ) )

        ;; (setq sse-out (nreverse sse-out))
        (while (> (safe-length sse-out) 0)
        (let ((cmd (pop sse-out)))
          (cond
           ((string= (nth 0 cmd) "goto")
            (if (boundp 'build-indices)
                (setq last-build-indices build-indices)
              (setq last-build-indices nil) )
            (make-variable-buffer-local 'last-build-indices)
            (setq build-indices (list (string-to-number (nth 1 cmd))
                                      (string-to-number (nth 2 cmd)) ))
            (make-variable-buffer-local 'build-indices)
            (place) )
           ((string= (nth 0 cmd) "next")
            (when (boundp 'build-indices)
              (setq last-build-indices build-indices)
              (let ((skipping t)
                    tag-end)
                (while skipping
                  (step-forward)
                  (save-excursion
                    (setq tag-end (search-forward ">" nil 'toend)) )
                  (unless (re-search-forward "class=\"[^\"]*auto" tag-end t)
                    (setq skipping nil) ) ) ) ) )
           ((string= (nth 0 cmd) "prev")
            (when (boundp 'build-indices)
              (let ((bounce-indices last-build-indices))
              (setq build-indices last-build-indices)
              (place)
              (let ((skipping t)
                    tag-end)
                (while skipping
                  (step-backward)
                  (save-excursion
                    (setq tag-end (search-forward ">" nil 'toend)) )
                  (unless (re-search-forward "class=\"[^\"]*auto" tag-end t)
                    (setq skipping nil) ) ) )
              (setq last-build-indices build-indices)
              (setq build-indices bounce-indices)
              (place) ) ) )
           ((string= (nth 0 cmd) "nej")
            (web-mode-element-beginning)
            (let ((inhibit-read-only t) tag-end)
              (save-excursion
                (setq tag-end (search-forward ">" nil 'toend)) )
              (if (re-search-forward "\\(class=\"[^\"]*\\) *nej" tag-end t)
                  (replace-match "\\1")
                ;; (web-mode-element-beginning)
                (if (re-search-forward "class=\"" tag-end t)
                    (progn
                      (unless (or (equal (char-before) ?  )
                                  (equal (char-before) ?\" ))
                        (insert " ") )
                      (insert "nej") )
                  (goto-char tag-end)
                  (backward-char)
                  (when (not (equal (char-before) " "))
                    (insert " ") )
                  (insert "class=\"nej\"") ) ) )
            (setq builds-points-list (figure-out-builds))
            (place) ) ) ) ) ) )

      (if (process-live-p process)
          (run-at-time 1 nil 'schedule-monitor-sse hb) ) ) ) )

(defun ask-for-sse (&optional url)
  (if sse-listen-mode
      (progn
        (setq-local sse-url (or url "http://localhost/stream"))
        (let ((hb (url-retrieve sse-url (function (lambda (x &rest y)
                                                    ;; (if (plist-get x :error)
                                                    ;;     (sse-listen-mode -1)
                                                      (ask-for-sse (car x)) ))
                                '(sse-url) )))
          ;; (function (lambda (&rest x) (ask-for-sse sse-url)))
          (schedule-monitor-sse hb) ) )
    ;; else
     ) )

(setq l-map (make-sparse-keymap))

(define-key l-map (kbd "<left>") (lambda () (interactive)(message "No!")))
(define-key l-map (kbd "<up>") (lambda () (interactive)(message "No!")))
(define-key l-map (kbd "<down>") (lambda () (interactive)(message "No!")))
(define-key l-map (kbd "<right>") (lambda () (interactive)(message "No!")) )
(define-key l-map (kbd "<down-mouse-1>") (lambda (&rest args) (interactive)))
(define-key l-map (kbd "<mouse-1>") 'mouse-select-window)
(define-key l-map (kbd "<drag-mouse-1>") (lambda (&rest args) (interactive)))

(define-minor-mode sse-listen-mode ""
  nil                                   ; initial value
  " SSE-Listen"                         ; light
  l-map
  (if sse-listen-mode
      (progn
        (if (buffer-modified-p)
            (progn
              (message "Save first, and reload your browser windows!")
              (sse-listen-mode -1) )
          (read-only-mode t)
          (setq builds-points-list (figure-out-builds))
          (make-local-variable 'builds-points-list)
          (ask-for-sse (if (boundp 'sse-source) sse-source nil)) ) )
    (read-only-mode -1)
    (save-buffer) ) 
  )
